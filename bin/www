#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var http = require('http');
var os = require('os')
var config = require('../config')
var fs = require('fs')
if(!fs.existsSync('./cache')){
  fs.mkdirSync('./cache');
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.port || 33001);
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function getIpv4() {
  var ifaces = os.networkInterfaces();
  for (var dev in ifaces) {
      for (var i in ifaces[dev]) {
          var details = ifaces[dev][i];
          if (/^\d+\./.test(details.address)) {
              return details.address;
          }
      }
  }
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  console.log(new Date().toISOString())
  console.log('App is running on http://'+getIpv4()+':'+config.port+'/')

}
